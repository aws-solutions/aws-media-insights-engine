AWSTemplateFormatVersion: "2010-09-09"
Description: "Media Insight Engine - Operator library"

Mappings:
  SourceCode:
    General:
      RegionalS3Bucket: "%%REGIONAL_BUCKET_NAME%%"
      CodeKeyPrefix: "aws-media-insights-engine/%%VERSION%%"

Parameters:
  DataPlaneEndpoint:
    Type: "String"
    Description: "Name of the dataplane handler lambda function"
  DataPlaneBucket:
    Type: "String"
    Description: "Bucket for the dataplane"
  ExternalBucketArn:
    Type: "String"
    Description: "The ARN for Amazon S3 resources that exist outside the MIE stack which may need to be used as inputs to MIE workflows"
  DataPlaneHandlerArn:
    Type: "String"
    Description: "Arn of dataplane lambda handler"

  WorkflowCustomResourceArn:
    Type: String
    Description: "ARN of the Media insights custom resource that handles creating operations, stages and workflows"

  MediaInsightsEnginePython38Layer:
    Type: String
    Description: "ARN of the Media insights lambda layer (python3.8) that contains basic python dependencies for boto3, chalice, control plane and dataplane"

  MediaInsightsEnginePython37Layer:
    Type: String
    Description: "ARN of the Media insights lambda layer (python3.7) that contains basic python dependencies for boto3, chalice, control plane and dataplane"

  MediaInsightsEnginePython36Layer:
    Type: String
    Description: "ARN of the Media insights lambda layer (python3.6) that contains basic python dependencies for boto3, chalice, control plane and dataplane"

  StartWaitOperationLambda:
    Type: String
    Description: "ARN of control plane lambda function to set a workflow to Waiting state"
  CheckWaitOperationLambda:
    Type: String
    Description: "ARN of control plane lambda function to if a workflow is in Waiting state"

Conditions:
  AllowAccessToExternalBucket: !Not
    - !Equals [!Ref "ExternalBucketArn", ""]

Resources:
  # SNS topic for storing the output of async Rekognition jobs:
  snsRekognitionTopic:
    Type: "AWS::SNS::Topic"
    Properties:
      DisplayName: "SNS Role for Rekognition"
      KmsMasterKeyId: "alias/aws/sns"
      Tags:
        - Key: "environment"
          Value: "mie"

  # IAM Roles:

  genericDataLookupLambdaRole:
    Type: "AWS::IAM::Role"
    Metadata:
      Comment: "This role contains two policies that provide GetObject permission for DataplaneBucketName. This duplication is necessary in order to avoid a syntax error when the user-specified ExternalBucketArn parameter is empty."
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The X-Ray policy applies to all resources - can't be scoped to a specific resource"
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
      Policies:
        - PolicyName: "GenericDataLookupLambdaAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${DataPlaneBucket}/*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                Resource: !If ["AllowAccessToExternalBucket", !Sub "${ExternalBucketArn}", !Sub "arn:aws:s3:::${DataPlaneBucket}/*"]
                Effect: "Allow"
              - Action: "lambda:InvokeFunction"
                Resource: !Ref DataPlaneHandlerArn
                Effect: "Allow"
              - Effect: "Allow"
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"
      Tags:
        - Key: "environment"
          Value: "mie"

  mediainfoLambdaRole:
    Type: "AWS::IAM::Role"
    Metadata:
      Comment: "This role contains two policies that provide GetObject permission for DataplaneBucketName. This duplication is necessary in order to avoid a syntax error when the user-specified ExternalBucketArn parameter is empty."
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The X-Ray policy applies to all resources - can't be scoped to a specific resource"
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
      Policies:
        - PolicyName: "mediainfoLambdaAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${DataPlaneBucket}/*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                Resource: !If ["AllowAccessToExternalBucket", !Sub "${ExternalBucketArn}", !Sub "arn:aws:s3:::${DataPlaneBucket}/*"]
                Effect: "Allow"
              - Action: "lambda:InvokeFunction"
                Resource: !Ref DataPlaneHandlerArn
                Effect: "Allow"
              - Effect: "Allow"
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"
      Tags:
        - Key: "environment"
          Value: "mie"

  mediaConvertS3Role:
    Type: "AWS::IAM::Role"
    Metadata:
      Comment: "This role contains two policies that provide GetObject permission for DataplaneBucketName. This duplication is necessary in order to avoid a syntax error when the user-specified ExternalBucketArn parameter is empty."
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "mediaconvert.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "MediaconvertAllowS3"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${DataPlaneBucket}/*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                Resource: !If ["AllowAccessToExternalBucket", !Sub "${ExternalBucketArn}", !Sub "arn:aws:s3:::${DataPlaneBucket}/*"]
                Effect: "Allow"
      Tags:
        - Key: "environment"
          Value: "mie"

  mediaConvertLambdaRole:
    Type: "AWS::IAM::Role"
    Metadata:
      Comment: "This role contains two policies that provide GetObject permission for DataplaneBucketName. This duplication is necessary in order to avoid a syntax error when the user-specified ExternalBucketArn parameter is empty."
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The X-Ray policy applies to all resources - can't be scoped to a specific resource"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
      Policies:
        - PolicyName: "MediaConvertLambdaAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  [
                      "mediaconvert:GetJob",
                      "mediaconvert:ListJobs",
                      "mediaconvert:DescribeEndpoints",
                      "mediaconvert:CreateJob"
                  ]
                Resource: "*"
                Effect: "Allow"
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*:*"
                Effect: "Allow"
              - Action:
                  - "iam:PassRole"
                Resource: !GetAtt "mediaConvertS3Role.Arn"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${DataPlaneBucket}/*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                Resource: !If ["AllowAccessToExternalBucket", !Sub "${ExternalBucketArn}", !Sub "arn:aws:s3:::${DataPlaneBucket}/*"]
                Effect: "Allow"
              - Action: "lambda:InvokeFunction"
                Resource: !Ref DataPlaneHandlerArn
                Effect: "Allow"
              - Effect: "Allow"
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"
      Tags:
        - Key: "environment"
          Value: "mie"

  transcribeRole:
    Type: "AWS::IAM::Role"
    Metadata:
      Comment: "This role contains two policies that provide GetObject permission for DataplaneBucketName. This duplication is necessary in order to avoid a syntax error when the user-specified ExternalBucketArn parameter is empty."
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The X-Ray policy applies to all resources - can't be scoped to a specific resource"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
      Policies:
        - PolicyName: "TranscribeAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  [
                      "transcribe:GetVocabulary",
                      "transcribe:GetTranscriptionJob",
                      "transcribe:CreateVocabulary",
                      "transcribe:StartStreamTranscription",
                      "transcribe:StartTranscriptionJob",
                      "transcribe:UpdateVocabulary",
                      "transcribe:ListTranscriptionJobs",
                      "transcribe:ListVocabularies"
                  ]
                # These actions only support Resource: “*”
                Resource: "*"
                Effect: "Allow"
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*:*"
                Effect: Allow
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${DataPlaneBucket}/*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                Resource: !If ["AllowAccessToExternalBucket", !Sub "${ExternalBucketArn}", !Sub "arn:aws:s3:::${DataPlaneBucket}/*"]
                Effect: "Allow"
              - Action: "lambda:InvokeFunction"
                Resource: !Ref DataPlaneHandlerArn
                Effect: "Allow"
              - Effect: "Allow"
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"
      Tags:
        - Key: "environment"
          Value: "mie"

  captionsRole:
    Type: "AWS::IAM::Role"
    Metadata:
      Comment: "This role contains two policies that provide GetObject permission for DataplaneBucketName. This duplication is necessary in order to avoid a syntax error when the user-specified ExternalBucketArn parameter is empty."
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The X-Ray policy applies to all resources - can't be scoped to a specific resource"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
      Policies:
        - PolicyName: "CaptionsAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*:*"
                Effect: Allow
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${DataPlaneBucket}/*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                Resource: !If ["AllowAccessToExternalBucket", !Sub "${ExternalBucketArn}", !Sub "arn:aws:s3:::${DataPlaneBucket}/*"]
                Effect: "Allow"
              - Action: "lambda:InvokeFunction"
                Resource: !Ref DataPlaneHandlerArn
                Effect: "Allow"
              - Effect: "Allow"
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"
      Tags:
        - Key: "environment"
          Value: "mie"

  translateS3Role:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "translate.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "TranslateAllowS3"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${DataPlaneBucket}/*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                Resource: !If ["AllowAccessToExternalBucket", !Sub "${ExternalBucketArn}", !Sub "arn:aws:s3:::${DataPlaneBucket}/*"]
                Effect: "Allow"
              - Action:
                  - "s3:ListBucket"
                Resource: !Sub "arn:aws:s3:::${DataPlaneBucket}"
                Effect: "Allow"

  translateRole:
    Type: "AWS::IAM::Role"
    Metadata:
      Comment: "This role contains two policies that provide GetObject permission for DataplaneBucketName. This duplication is necessary in order to avoid a syntax error when the user-specified ExternalBucketArn parameter is empty."
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The X-Ray policy applies to all resources - can't be scoped to a specific resource"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
      Policies:
        - PolicyName: "TranslateAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - iam:PassRole
                Resource: !GetAtt "translateS3Role.Arn"
                Effect: "Allow"
              - Action: [
                  "translate:GetTerminology",
                  "translate:ListTerminologies",
                  "translate:ImportTerminology",
                  "translate:TranslateText",
                  "translate:DescribeTextTranslationJob",
                  "translate:StartTextTranslationJob"
              ]
                # These actions only support Resource: “*”
                Resource: "*"
                Effect: "Allow"
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*:*"
                Effect: Allow
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${DataPlaneBucket}/*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                Resource: !If ["AllowAccessToExternalBucket", !Sub "${ExternalBucketArn}", !Sub "arn:aws:s3:::${DataPlaneBucket}/*"]
                Effect: "Allow"
              - Action:
                  - "s3:ListBucket"
                Resource: !Sub "arn:aws:s3:::${DataPlaneBucket}"
                Effect: "Allow"
              - Action: "lambda:InvokeFunction"
                Resource: !Ref DataPlaneHandlerArn
                Effect: "Allow"
              - Effect: "Allow"
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"
      Tags:
        - Key: "environment"
          Value: "mie"

  pollyRole:
    Type: "AWS::IAM::Role"
    Metadata:
      Comment: "This role contains two policies that provide GetObject permission for DataplaneBucketName. This duplication is necessary in order to avoid a syntax error when the user-specified ExternalBucketArn parameter is empty."
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The X-Ray policy applies to all resources - can't be scoped to a specific resource"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "comprehend.amazonaws.com"
      Policies:
        - PolicyName: "PollyAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  [
                      "polly:SynthesizeSpeech",
                      "polly:StartSpeechSynthesisTask",
                      "polly:ListLexicons",
                      "polly:GetSpeechSynthesisTask",
                      "polly:ListSpeechSynthesisTasks",
                      "comprehend:DetectDominantLanguage",
                      "polly:GetLexicon",
                      "polly:DescribeVoices"
                  ]
                # These actions only support Resource: “*”
                Resource: "*"
                Effect: "Allow"
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*:*"
                Effect: Allow
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${DataPlaneBucket}/*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                Resource: !If ["AllowAccessToExternalBucket", !Sub "${ExternalBucketArn}", !Sub "arn:aws:s3:::${DataPlaneBucket}/*"]
                Effect: "Allow"
              - Action:
                  - "comprehend:DetectDominantLanguage"
                Resource: "*"
                Effect: "Allow"
              - Action: "lambda:InvokeFunction"
                Resource: !Ref DataPlaneHandlerArn
                Effect: "Allow"
              - Effect: "Allow"
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"
      Tags:
        - Key: "environment"
          Value: "mie"

  comprehendS3Role:
    Type: "AWS::IAM::Role"
    Metadata:
      Comment: "This role contains two policies that provide GetObject permission for DataplaneBucketName. This duplication is necessary in order to avoid a syntax error when the user-specified ExternalBucketArn parameter is empty."
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The X-Ray policy applies to all resources - can't be scoped to a specific resource. Furthermore, the KMS policy must also apply to all resources because it relates to user-defined KMS keys which cannot be known beforehand."
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "comprehend.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: "ComprehendAllowS3"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${DataPlaneBucket}/*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                Resource: !If ["AllowAccessToExternalBucket", !Sub "${ExternalBucketArn}", !Sub "arn:aws:s3:::${DataPlaneBucket}/*"]
                Effect: "Allow"
              - Action:
                  - "s3:ListBucket"
                Resource: !Sub "arn:aws:s3:::${DataPlaneBucket}"
                Effect: "Allow"
              - Effect: "Allow"
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "kms:CreateGrant"
                  - "kms:GenerateDataKey"
                Resource: "*"
      Tags:
        - Key: "environment"
          Value: "mie"

  comprehendRole:
    Type: "AWS::IAM::Role"
    Metadata:
      Comment: "This role contains two policies that provide GetObject permission for DataplaneBucketName. This duplication is necessary in order to avoid a syntax error when the user-specified ExternalBucketArn parameter is empty."
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The X-Ray policy applies to all resources - can't be scoped to a specific resource. Furthermore, the KMS policy must also apply to all resources because it relates to user-defined KMS keys which cannot be known beforehand."
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
      Policies:
        - PolicyName: "comprehendAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - iam:PassRole
                Resource: !GetAtt "comprehendS3Role.Arn"
                Effect: "Allow"
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*:*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                Resource: !Sub "arn:aws:s3:::${DataPlaneBucket}/*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                Resource: !If ["AllowAccessToExternalBucket", !Sub "${ExternalBucketArn}", !Sub "arn:aws:s3:::${DataPlaneBucket}/*"]
                Effect: "Allow"
              - Action:
                  [
                      "comprehend:StartEntitiesDetectionJob",
                      "comprehend:DetectSentiment",
                      "comprehend:DescribeEntityRecognizer",
                      "comprehend:ListTopicsDetectionJobs",
                      "comprehend:DescribeDominantLanguageDetectionJob",
                      "comprehend:StopTrainingEntityRecognizer",
                      "comprehend:DescribeDocumentClassificationJob",
                      "comprehend:StopSentimentDetectionJob",
                      "comprehend:StartDominantLanguageDetectionJob",
                      "comprehend:StartTopicsDetectionJob",
                      "comprehend:DetectDominantLanguage",
                      "comprehend:CreateDocumentClassifier",
                      "comprehend:ListEntityRecognizers",
                      "comprehend:ListSentimentDetectionJobs",
                      "comprehend:BatchDetectSyntax",
                      "comprehend:StartSentimentDetectionJob",
                      "comprehend:ListDominantLanguageDetectionJobs",
                      "comprehend:ListDocumentClassifiers",
                      "comprehend:DescribeKeyPhrasesDetectionJob",
                      "comprehend:CreateEntityRecognizer",
                      "comprehend:ListKeyPhrasesDetectionJobs",
                      "comprehend:DescribeSentimentDetectionJob",
                      "comprehend:DescribeTopicsDetectionJob",
                      "comprehend:StopDominantLanguageDetectionJob",
                      "comprehend:BatchDetectSentiment",
                      "comprehend:StartKeyPhrasesDetectionJob",
                      "comprehend:BatchDetectEntities",
                      "comprehend:BatchDetectKeyPhrases",
                      "comprehend:ListEntitiesDetectionJobs",
                      "comprehend:StopKeyPhrasesDetectionJob",
                      "comprehend:ListDocumentClassificationJobs",
                      "comprehend:DetectSyntax",
                      "comprehend:DescribeEntitiesDetectionJob",
                      "comprehend:StopTrainingDocumentClassifier",
                      "comprehend:ListTagsForResource",
                      "comprehend:DescribeDocumentClassifier",
                      "comprehend:StopEntitiesDetectionJob",
                      "comprehend:BatchDetectDominantLanguage",
                      "comprehend:StartDocumentClassificationJob",
                      "comprehend:DetectEntities",
                      "comprehend:DetectKeyPhrases"
                  ]
                # These actions only support Resource: “*”
                Resource: "*"
                Effect: "Allow"
              - Action: "lambda:InvokeFunction"
                Resource: !Ref DataPlaneHandlerArn
                Effect: "Allow"
              - Effect: "Allow"
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "kms:Decrypt"
                Resource: "*"
      Tags:
        - Key: "environment"
          Value: "mie"

  rekognitionSNSRole:
    Type: "AWS::IAM::Role"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "the policy actions used in this role require * resource"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "rekognition.amazonaws.com"
      Policies:
        - PolicyName: "RekognitionSNSPublishPolicy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - sns:Publish
                Resource: !Ref "snsRekognitionTopic"
                Effect: "Allow"
              - Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"
                Effect: "Allow"
      Tags:
        - Key: "environment"
          Value: "mie"

  rekognitionLambdaRole:
    Type: "AWS::IAM::Role"
    Metadata:
      Comment: "This role contains two policies that provide GetObject permission for DataplaneBucketName. This duplication is necessary in order to avoid a syntax error when the user-specified ExternalBucketArn parameter is empty."
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "the policy actions used in this role require * resource"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
      Policies:
        - PolicyName: "rekognitionAccess"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - iam:PassRole
                Resource: !GetAtt "rekognitionSNSRole.Arn"
                Effect: "Allow"
              - Action: "lambda:InvokeFunction"
                Resource: !Ref DataPlaneHandlerArn
                Effect: "Allow"
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*:*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                Resource: !Sub "arn:aws:s3:::${DataPlaneBucket}/*"
                Effect: "Allow"
              - Action:
                  - "s3:GetObject"
                Resource: !If ["AllowAccessToExternalBucket", !Sub "${ExternalBucketArn}", !Sub "arn:aws:s3:::${DataPlaneBucket}/*"]
                Effect: "Allow"
              - Action:
                  - "rekognition:DetectFaces"
                  - "rekognition:DetectLabels"
                  - "rekognition:DetectText"
                  - "rekognition:DetectModerationLabels"
                  - "rekognition:GetCelebrityRecognition"
                  - "rekognition:GetContentModeration"
                  - "rekognition:GetFaceDetection"
                  - "rekognition:GetFaceSearch"
                  - "rekognition:GetLabelDetection"
                  - "rekognition:GetPersonTracking"
                  - "rekognition:RecognizeCelebrities"
                  - "rekognition:StartCelebrityRecognition"
                  - "rekognition:StartContentModeration"
                  - "rekognition:StartFaceDetection"
                  - "rekognition:StartFaceSearch"
                  - "rekognition:StartLabelDetection"
                  - "rekognition:StartPersonTracking"
                  - "rekognition:StartTextDetection"
                  - "rekognition:GetTextDetection"
                  - "rekognition:StartSegmentDetection"
                  - "rekognition:GetSegmentDetection"
                # These Rekognition actions do not support resource-level permissions, so we must use Resource: *
                Resource: "*"
                Effect: "Allow"
              - Action:
                  - "rekognition:DescribeCollection"
                  - "rekognition:SearchFaces"
                  - "rekognition:SearchFacesByImage"
                Resource:
                  - !Sub "arn:aws:rekognition:${AWS::Region}:${AWS::AccountId}:collection/*"
                Effect: "Allow"
              - Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"
                Effect: "Allow"
      Tags:
        - Key: "environment"
          Value: "mie"

  # Lambda functions

  # This is a generic Lambda function for getting metadata from JSON file in S3:
  startGenericDataLookup:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "generic_data_lookup.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt genericDataLookupLambdaRole.Arn
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "generic_data_lookup.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 300
      Environment:
        Variables:
          OPERATOR_NAME: "GenericDataLookup"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DataLookupRole: !GetAtt genericDataLookupLambdaRole.Arn
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  # Mediainfo

  Mediainfo:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "mediainfo.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython37Layer
      Role: !GetAtt mediainfoLambdaRole.Arn
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "mediainfo.zip",
            ],
          ]
      Runtime: "python3.7"
      Timeout: 300
      Environment:
        Variables:
          OPERATOR_NAME: "Mediainfo"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DataLookupRole: !GetAtt mediainfoLambdaRole.Arn
          LD_LIBRARY_PATH: "/opt/python/"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  # Comprehend

  startKeyPhrases:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "start_key_phrases.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt comprehendRole.Arn
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "start_key_phrases.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 300
      Environment:
        Variables:
          OPERATOR_NAME: "comprehendStartKeyPhrases"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          comprehendRole: !GetAtt comprehendS3Role.Arn
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  getKeyPhrases:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "get_key_phrases.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt comprehendRole.Arn
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "get_key_phrases.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 300
      Environment:
        Variables:
          OPERATOR_NAME: "comprehendGetKeyPhrases"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          comprehendRole: !GetAtt comprehendS3Role.Arn
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  startEntityDetection:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "start_entity_detection.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt comprehendRole.Arn
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "start_entity_detection.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 300
      Environment:
        Variables:
          OPERATOR_NAME: "comprehendStartEntityDetection"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          comprehendRole: !GetAtt comprehendS3Role.Arn
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  getEntityDetection:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "get_entity_detection.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt comprehendRole.Arn
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "get_entity_detection.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 300
      Environment:
        Variables:
          OPERATOR_NAME: "comprehendEntityDetection"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          comprehendRole: !GetAtt comprehendS3Role.Arn
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  # Rekognition

  startTechnicalCueDetection:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "start_technical_cue_detection.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt "rekognitionLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "start_technical_cue_detection.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 120
      Environment:
        Variables:
          REKOGNITION_SNS_TOPIC_ARN: !Ref "snsRekognitionTopic"
          REKOGNITION_ROLE_ARN: !GetAtt "rekognitionSNSRole.Arn"
          OPERATOR_NAME: "technicalCueDetection"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  checkTechnicalCueDetection:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "check_technical_cue_status.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt "rekognitionLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "check_technical_cue_status.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 120
      Environment:
        Variables:
          REKOGNITION_SNS_TOPIC_ARN: !Ref "snsRekognitionTopic"
          REKOGNITION_ROLE_ARN: !GetAtt "rekognitionSNSRole.Arn"
          OPERATOR_NAME: "technicalCueDetection"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  startShotDetection:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "start_shot_detection.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt "rekognitionLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "start_shot_detection.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 120
      Environment:
        Variables:
          REKOGNITION_SNS_TOPIC_ARN: !Ref "snsRekognitionTopic"
          REKOGNITION_ROLE_ARN: !GetAtt "rekognitionSNSRole.Arn"
          OPERATOR_NAME: "shotDetection"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  checkShotDetection:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "check_shot_detection_status.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt "rekognitionLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "check_shot_detection_status.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 120
      Environment:
        Variables:
          REKOGNITION_SNS_TOPIC_ARN: !Ref "snsRekognitionTopic"
          REKOGNITION_ROLE_ARN: !GetAtt "rekognitionSNSRole.Arn"
          OPERATOR_NAME: "shotDetection"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  startCelebrityRecognition:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "start_celebrity_recognition.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt "rekognitionLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "start_celebrity_recognition.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 120
      Environment:
        Variables:
          REKOGNITION_SNS_TOPIC_ARN: !Ref "snsRekognitionTopic"
          REKOGNITION_ROLE_ARN: !GetAtt "rekognitionSNSRole.Arn"
          OPERATOR_NAME: "celebrityRecognition"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  checkCelebrityRecognition:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "check_celebrity_recognition_status.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt "rekognitionLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "check_celebrity_recognition_status.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 120
      Environment:
        Variables:
          REKOGNITION_ROLE_ARN: !GetAtt "rekognitionSNSRole.Arn"
          OPERATOR_NAME: "celebrityRecognition"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  startContentModeration:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "start_content_moderation.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt "rekognitionLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "start_content_moderation.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 120
      Environment:
        Variables:
          REKOGNITION_SNS_TOPIC_ARN: !Ref "snsRekognitionTopic"
          REKOGNITION_ROLE_ARN: !GetAtt "rekognitionSNSRole.Arn"
          OPERATOR_NAME: "contentModeration"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  checkContentModeration:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "check_content_moderation_status.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt "rekognitionLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "check_content_moderation_status.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 120
      Environment:
        Variables:
          REKOGNITION_ROLE_ARN: !GetAtt "rekognitionSNSRole.Arn"
          OPERATOR_NAME: "contentModeration"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  startFaceDetection:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "start_face_detection.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt "rekognitionLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "start_face_detection.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 120
      MemorySize: 256
      Environment:
        Variables:
          REKOGNITION_SNS_TOPIC_ARN: !Ref "snsRekognitionTopic"
          REKOGNITION_ROLE_ARN: !GetAtt "rekognitionSNSRole.Arn"
          OPERATOR_NAME: "faceDetection"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  checkFaceDetection:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "check_face_detection_status.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt "rekognitionLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "check_face_detection_status.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 300
      MemorySize: 512
      Environment:
        Variables:
          REKOGNITION_ROLE_ARN: !GetAtt "rekognitionSNSRole.Arn"
          OPERATOR_NAME: "faceDetection"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  startFaceSearch:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "start_face_search.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt "rekognitionLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "start_face_search.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 120
      MemorySize: 256
      Environment:
        Variables:
          REKOGNITION_SNS_TOPIC_ARN: !Ref "snsRekognitionTopic"
          REKOGNITION_ROLE_ARN: !GetAtt "rekognitionSNSRole.Arn"
          OPERATOR_NAME: "faceSearch"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  checkFaceSearch:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "check_face_search_status.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt "rekognitionLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "check_face_search_status.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 120
      MemorySize: 256
      Environment:
        Variables:
          REKOGNITION_ROLE_ARN: !GetAtt "rekognitionSNSRole.Arn"
          OPERATOR_NAME: "faceSearch"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  startTextDetection:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "start_text_detection.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt "rekognitionLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "start_text_detection.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 120
      Environment:
        Variables:
          REKOGNITION_SNS_TOPIC_ARN: !Ref "snsRekognitionTopic"
          REKOGNITION_ROLE_ARN: !GetAtt "rekognitionSNSRole.Arn"
          OPERATOR_NAME: "textDetection"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  checkTextDetection:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "check_text_detection_status.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt "rekognitionLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "check_text_detection_status.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 240
      MemorySize: 256
      Environment:
        Variables:
          REKOGNITION_ROLE_ARN: !GetAtt "rekognitionSNSRole.Arn"
          OPERATOR_NAME: "textDetection"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  startLabelDetection:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "start_label_detection.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt "rekognitionLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "start_label_detection.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 120
      Environment:
        Variables:
          REKOGNITION_SNS_TOPIC_ARN: !Ref "snsRekognitionTopic"
          REKOGNITION_ROLE_ARN: !GetAtt "rekognitionSNSRole.Arn"
          OPERATOR_NAME: "labelDetection"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  checkLabelDetection:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "check_label_detection_status.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt "rekognitionLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "check_label_detection_status.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 240
      MemorySize: 256
      Environment:
        Variables:
          REKOGNITION_ROLE_ARN: !GetAtt "rekognitionSNSRole.Arn"
          OPERATOR_NAME: "labelDetection"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  startPersonTracking:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "start_person_tracking.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt "rekognitionLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "start_person_tracking.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 120
      Environment:
        Variables:
          REKOGNITION_SNS_TOPIC_ARN: !Ref "snsRekognitionTopic"
          REKOGNITION_ROLE_ARN: !GetAtt "rekognitionSNSRole.Arn"
          OPERATOR_NAME: "personTracking"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  checkPersonTracking:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "check_person_tracking_status.lambda_handler"
      Layers:
        - !Ref MediaInsightsEnginePython38Layer
      Role: !GetAtt "rekognitionLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "check_person_tracking_status.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 120
      MemorySize: 256
      Environment:
        Variables:
          REKOGNITION_ROLE_ARN: !GetAtt "rekognitionSNSRole.Arn"
          OPERATOR_NAME: "personTracking"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  # Mediaconvert Lambdas

  StartMediaConvertFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "start_media_convert.lambda_handler"
      Layers:
        - !Ref "MediaInsightsEnginePython38Layer"
      Role: !GetAtt "mediaConvertLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "start_media_convert.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 60
      Environment:
        Variables:
          mediaconvertRole: !GetAtt "mediaConvertS3Role.Arn"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  StartThumbnailFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "start_thumbnail.lambda_handler"
      Layers:
        - !Ref "MediaInsightsEnginePython38Layer"
      Role: !GetAtt "mediaConvertLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "start_thumbnail.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 60
      Environment:
        Variables:
          mediaconvertRole: !GetAtt "mediaConvertS3Role.Arn"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  CheckThumbnailFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "check_thumbnail.lambda_handler"
      Layers:
        - !Ref "MediaInsightsEnginePython38Layer"
      Role: !GetAtt "mediaConvertLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "check_thumbnail.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 60
      Environment:
        Variables:
          mediaconvertRole: !GetAtt "mediaConvertS3Role.Arn"
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  CheckMediaConvertFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "get_media_convert.lambda_handler"
      Layers:
        - !Ref "MediaInsightsEnginePython38Layer"
      Role: !GetAtt "mediaConvertLambdaRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "get_media_convert.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 60
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  # Transcribe Lambdas

  StartTranscribeFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "start_transcribe.lambda_handler"
      Layers:
        - !Ref "MediaInsightsEnginePython38Layer"
      Role: !GetAtt "transcribeRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "start_transcribe.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 120
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  CheckTranscribeFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "get_transcribe.lambda_handler"
      Layers:
        - !Ref "MediaInsightsEnginePython38Layer"
      Role: !GetAtt "transcribeRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "get_transcribe.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 120
      MemorySize: 256
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  # Create Web Captions Lambda

  WebCaptionsFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "webcaptions.web_captions"
      Layers:
        - !Ref "MediaInsightsEnginePython38Layer"
      Role: !GetAtt "captionsRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "webcaptions.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  # Create Time Series Lambda

  CreateSRTCaptionsFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "webcaptions.create_srt"
      Layers:
        - !Ref "MediaInsightsEnginePython38Layer"
      Role: !GetAtt "captionsRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "webcaptions.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 300
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  CreateVTTCaptionsFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "webcaptions.create_vtt"
      Layers:
        - !Ref "MediaInsightsEnginePython38Layer"
      Role: !GetAtt "captionsRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "webcaptions.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 300
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  WebToSRTCaptionsFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "webcaptions.create_srt"
      Layers:
        - !Ref "MediaInsightsEnginePython38Layer"
      Role: !GetAtt "captionsRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "webcaptions.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 300
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  WebToVTTCaptionsFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "webcaptions.create_vtt"
      Layers:
        - !Ref "MediaInsightsEnginePython38Layer"
      Role: !GetAtt "captionsRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "webcaptions.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 300
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  # Translate Lambdas

  TranslateFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "start_translate.lambda_handler"
      Layers:
        - !Ref "MediaInsightsEnginePython38Layer"
      Role: !GetAtt "translateRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "start_translate.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 300
      MemorySize: 256
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  StartTranslateWebcaptionsFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "webcaptions.start_translate_webcaptions"
      Layers:
        - !Ref "MediaInsightsEnginePython38Layer"
      Role: !GetAtt "translateRole.Arn"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "webcaptions.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 300
      Environment:
        Variables:
          translateRole: !GetAtt translateS3Role.Arn
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  CheckTranslateWebcaptionsFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "webcaptions.check_translate_webcaptions"
      Layers:
        - !Ref "MediaInsightsEnginePython38Layer"
      Role: !GetAtt "translateRole.Arn"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "webcaptions.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 300
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  # WebCaptions Polly tracks
  StartPollyWebCaptionsFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "webcaptions.start_polly_webcaptions"
      Layers:
        - !Ref "MediaInsightsEnginePython38Layer"
      Role: !GetAtt "pollyRole.Arn"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "webcaptions.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 300
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  CheckPollyWebCaptionsFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "webcaptions.check_polly_webcaptions"
      Layers:
        - !Ref "MediaInsightsEnginePython38Layer"
      Role: !GetAtt "pollyRole.Arn"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "webcaptions.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 300
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  # Polly Lambdas

  StartPollyFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "start_polly.lambda_handler"
      Layers:
        - !Ref "MediaInsightsEnginePython38Layer"
      Role: !GetAtt "pollyRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "start_polly.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 120
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  CheckPollyFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "get_polly.lambda_handler"
      Layers:
        - !Ref "MediaInsightsEnginePython38Layer"
      Role: !GetAtt "pollyRole.Arn"
      TracingConfig:
        Mode: "PassThrough"
      Code:
        S3Bucket: !Join [ "-", [ !FindInMap [ "SourceCode", "General", "RegionalS3Bucket" ], Ref: "AWS::Region" ] ]
        S3Key:
          !Join [
              "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "get_polly.zip",
            ],
          ]
      Runtime: "python3.8"
      Timeout: 120
      Environment:
        Variables:
          DataplaneEndpoint: !Ref "DataPlaneEndpoint"
          DATAPLANE_BUCKET: !Ref "DataPlaneBucket"
          botoConfig: '{"user_agent_extra": "AwsSolution/SO0163/%%VERSION%%"}'
      Tags:
        - Key: "environment"
          Value: "mie"

  # Register as operators in the control plane

  GenericDataLookupOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "GenericDataLookup"
      Type: "Sync"
      Configuration: { "MediaType": "Video", "Enabled": false }
      StartLambdaArn: !GetAtt startGenericDataLookup.Arn

  MediainfoOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "Mediainfo"
      Type: "Sync"
      Configuration: { "MediaType": "Video", "Enabled": true }
      StartLambdaArn: !GetAtt Mediainfo.Arn

  MediainfoOperationImage:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "MediainfoImage"
      Type: "Sync"
      Configuration: { "MediaType": "Image", "Enabled": true }
      StartLambdaArn: !GetAtt Mediainfo.Arn

  MediaconvertOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "Mediaconvert"
      Type: "Async"
      Configuration: { "MediaType": "Video", "Enabled": true }
      StartLambdaArn: !GetAtt StartMediaConvertFunction.Arn
      MonitorLambdaArn: !GetAtt CheckMediaConvertFunction.Arn

  ThumbnailOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "Thumbnail"
      Type: "Async"
      Configuration: { "MediaType": "Video", "Enabled": true }
      StartLambdaArn: !GetAtt StartThumbnailFunction.Arn
      MonitorLambdaArn: !GetAtt CheckThumbnailFunction.Arn

  TranscribeAudioOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "TranscribeAudio"
      Type: "Async"
      Configuration:
        { "TranscribeLanguage": "en-US", "MediaType": "Audio", "Enabled": true }
      StartLambdaArn: !GetAtt StartTranscribeFunction.Arn
      MonitorLambdaArn: !GetAtt CheckTranscribeFunction.Arn

  TranscribeVideoOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "TranscribeVideo"
      Type: "Async"
      Configuration:
        { "TranscribeLanguage": "en-US", "MediaType": "Video", "Enabled": true }
      StartLambdaArn: !GetAtt StartTranscribeFunction.Arn
      MonitorLambdaArn: !GetAtt CheckTranscribeFunction.Arn

  WebCaptionsOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "WebCaptions"
      Type: "Sync"
      Configuration:
        { "MediaType": "MetadataOnly", "SourceLanguageCode": "en", "Enabled": true }
      StartLambdaArn: !GetAtt WebCaptionsFunction.Arn

  PollyWebCaptionsOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "PollyWebCaptions"
      Type: "Async"
      Configuration:
        { "MediaType": "MetadataOnly", "SourceLanguageCode": "en", "Enabled": true }
      StartLambdaArn: !GetAtt StartPollyWebCaptionsFunction.Arn
      MonitorLambdaArn: !GetAtt CheckPollyWebCaptionsFunction.Arn

  CreateSRTCaptionsOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "CreateSRTCaptions"
      Type: "Sync"
      Configuration: { "MediaType": "Text", "Enabled": true }
      StartLambdaArn: !GetAtt CreateSRTCaptionsFunction.Arn

  CreateVTTCaptionsOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "CreateVTTCaptions"
      Type: "Sync"
      Configuration: { "MediaType": "Text", "Enabled": true }
      StartLambdaArn: !GetAtt CreateVTTCaptionsFunction.Arn

  WebToSRTCaptionsOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "WebToSRTCaptions"
      Type: "Sync"
      Configuration:
        {
          "MediaType": "MetadataOnly",
          "TargetLanguageCodes": ["en"],
          "Enabled": true
        }
      StartLambdaArn: !GetAtt WebToSRTCaptionsFunction.Arn

  WebToVTTCaptionsOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "WebToVTTCaptions"
      Type: "Sync"
      Configuration:
        {
          "MediaType": "MetadataOnly",
          "TargetLanguageCodes": ["en"],
          "Enabled": true
        }
      StartLambdaArn: !GetAtt WebToVTTCaptionsFunction.Arn

  TranslateOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "Translate"
      Type: "Sync"
      Configuration:
        {
          "MediaType": "Text",
          "TargetLanguageCode": "ru",
          "Enabled": true,
          "SourceLanguageCode": "en",
        }
      StartLambdaArn: !GetAtt TranslateFunction.Arn

  TranslateWebCaptionsOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "TranslateWebCaptions"
      Type: "Async"
      Configuration:
        {
          "MediaType": "MetadataOnly",
          "TargetLanguageCodes": ["es"],
          "Enabled": true,
          "SourceLanguageCode": "en",
        }
      StartLambdaArn: !GetAtt StartTranslateWebcaptionsFunction.Arn
      MonitorLambdaArn: !GetAtt CheckTranslateWebcaptionsFunction.Arn

  PollyOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "Polly"
      Type: "Async"
      Configuration: { "MediaType": "Text", "Enabled": false }
      StartLambdaArn: !GetAtt StartPollyFunction.Arn
      MonitorLambdaArn: !GetAtt CheckPollyFunction.Arn

  comprehendPhrasesOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "ComprehendKeyPhrases"
      Type: "Async"
      Configuration: { "MediaType": "Text", "Enabled": true }
      StartLambdaArn: !GetAtt startKeyPhrases.Arn
      MonitorLambdaArn: !GetAtt getKeyPhrases.Arn

  comprehendEntitiesOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "ComprehendEntities"
      Type: "Async"
      Configuration: { "MediaType": "Text", "Enabled": true }
      StartLambdaArn: !GetAtt startEntityDetection.Arn
      MonitorLambdaArn: !GetAtt getEntityDetection.Arn

  celebrityRecognitionOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "celebrityRecognition"
      Type: "Async"
      Configuration: { "MediaType": "Video", "Enabled": true }
      StartLambdaArn: !GetAtt startCelebrityRecognition.Arn
      MonitorLambdaArn: !GetAtt checkCelebrityRecognition.Arn

  celebrityRecognitionOperationImage:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "celebrityRecognitionImage"
      Type: "Sync"
      Configuration: { "MediaType": "Image", "Enabled": true }
      StartLambdaArn: !GetAtt startCelebrityRecognition.Arn

  contentModerationOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "contentModeration"
      Type: "Async"
      Configuration: { "MediaType": "Video", "Enabled": true }
      StartLambdaArn: !GetAtt startContentModeration.Arn
      MonitorLambdaArn: !GetAtt checkContentModeration.Arn

  contentModerationOperationImage:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "contentModerationImage"
      Type: "Sync"
      Configuration: { "MediaType": "Image", "Enabled": true }
      StartLambdaArn: !GetAtt startContentModeration.Arn

  faceDetectionOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "faceDetection"
      Type: "Async"
      Configuration: { "MediaType": "Video", "Enabled": true }
      StartLambdaArn: !GetAtt startFaceDetection.Arn
      MonitorLambdaArn: !GetAtt checkFaceDetection.Arn

  faceDetectionOperationImage:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "faceDetectionImage"
      Type: "Sync"
      Configuration: { "MediaType": "Image", "Enabled": true }
      StartLambdaArn: !GetAtt startFaceDetection.Arn

  faceSearchOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "faceSearch"
      Type: "Async"
      Configuration: { "MediaType": "Video", "Enabled": false, "CollectionId": "" }
      StartLambdaArn: !GetAtt startFaceSearch.Arn
      MonitorLambdaArn: !GetAtt checkFaceSearch.Arn

  faceSearchOperationImage:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "faceSearchImage"
      Type: "Sync"
      Configuration: { "MediaType": "Image", "Enabled": false, "CollectionId": "" }
      StartLambdaArn: !GetAtt startFaceSearch.Arn

  labelDetectionOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "labelDetection"
      Type: "Async"
      Configuration: { "MediaType": "Video", "Enabled": true }
      StartLambdaArn: !GetAtt startLabelDetection.Arn
      MonitorLambdaArn: !GetAtt checkLabelDetection.Arn

  technicalCueDetectionOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "technicalCueDetection"
      Type: "Async"
      Configuration: { "MediaType": "Video", "Enabled": true }
      StartLambdaArn: !GetAtt startTechnicalCueDetection.Arn
      MonitorLambdaArn: !GetAtt checkTechnicalCueDetection.Arn

  shotDetectionOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "shotDetection"
      Type: "Async"
      Configuration: { "MediaType": "Video", "Enabled": true }
      StartLambdaArn: !GetAtt startShotDetection.Arn
      MonitorLambdaArn: !GetAtt checkShotDetection.Arn

  textDetectionOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "textDetection"
      Type: "Async"
      Configuration: { "MediaType": "Video", "Enabled": true }
      StartLambdaArn: !GetAtt startTextDetection.Arn
      MonitorLambdaArn: !GetAtt checkTextDetection.Arn

  textDetectionOperationImage:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "textDetectionImage"
      Type: "Sync"
      Configuration: { "MediaType": "Image", "Enabled": true }
      StartLambdaArn: !GetAtt startTextDetection.Arn

  labelDetectionOperationImage:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "labelDetectionImage"
      Type: "Sync"
      Configuration: { "MediaType": "Image", "Enabled": true }
      StartLambdaArn: !GetAtt startLabelDetection.Arn

  personTrackingOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "personTracking"
      Type: "Async"
      Configuration: { "MediaType": "Video", "Enabled": false }
      StartLambdaArn: !GetAtt startPersonTracking.Arn
      MonitorLambdaArn: !GetAtt checkPersonTracking.Arn

  WaitOperation:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !Ref WorkflowCustomResourceArn
      ResourceType: "Operation"
      Name: "Wait"
      Type: "Async"
      Configuration: { "MediaType": "MetadataOnly", "Enabled": false }
      StartLambdaArn: !Ref StartWaitOperationLambda
      MonitorLambdaArn: !Ref CheckWaitOperationLambda

  # Export operator names as outputs

Outputs:
  GenericDataLookupOperation:
    Description: "Operation name of GenericDataLookup"
    Value: !GetAtt GenericDataLookupOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", GenericDataLookup]]
  MediainfoOperation:
    Description: "Operation name of Mediainfo"
    Value: !GetAtt MediainfoOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", Mediainfo]]
  MediainfoOperationImage:
    Description: "Operation name of MediainfoImage"
    Value: !GetAtt MediainfoOperationImage.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", MediainfoImage]]
  MediaconvertOperation:
    Description: "Operation name of mediaconvert"
    Value: !GetAtt MediaconvertOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", Mediaconvert]]
  ThumbnailOperation:
    Description: "Operation name of thumbnail"
    Value: !GetAtt ThumbnailOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", Thumbnail]]
  TranscribeAudioOperation:
    Description: "Operation name of transcribe for audio"
    Value: !GetAtt TranscribeAudioOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", TranscribeAudio]]
  TranscribeVideoOperation:
    Description: "Operation name of transcribe for video"
    Value: !GetAtt TranscribeVideoOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", TranscribeVideo]]
  WebCaptionsOperation:
    Description: "Operation to create web captions"
    Value: !GetAtt WebCaptionsOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", WebCaptions]]
  PollyWebCaptionsOperation:
    Description: "Operation to create audio tracks from webcaptions collection transcripts"
    Value: !GetAtt PollyWebCaptionsOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", PollyWebCaptions]]
  CreateSRTCaptionsOperation:
    Description: "Operation to create SRT captions"
    Value: !GetAtt CreateSRTCaptionsOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", CreateSRTCaptions]]
  CreateVTTCaptionsOperation:
    Description: "Operation to create VTT captions"
    Value: !GetAtt CreateVTTCaptionsOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", CreateVTTCaptions]]
  WebToSRTCaptionsOperation:
    Description: "Operation to convert web captions to SRT format"
    Value: !GetAtt WebToSRTCaptionsOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", WebToSRTCaptions]]
  WebToVTTCaptionsOperation:
    Description: "Operation to convert web captions to VTT format"
    Value: !GetAtt WebToVTTCaptionsOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", WebToVTTCaptions]]
  TranslateOperation:
    Description: "Operation name of translate"
    Value: !GetAtt TranslateOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", Translate]]
  TranslateWebCaptionsOperation:
    Description: "Operation name of translate WebCaptions"
    Value: !GetAtt TranslateWebCaptionsOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", TranslateWebCaptions]]
  PollyOperation:
    Description: "Operation name of polly"
    Value: !GetAtt PollyOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", Polly]]
  comprehendPhrasesOperation:
    Description: "Operation name of polly"
    Value: !GetAtt comprehendPhrasesOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", ComprehendPhrases]]
  comprehendEntitiesOperation:
    Description: "Operation name of polly"
    Value: !GetAtt comprehendEntitiesOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", ComprehendEntities]]

  # Rekognition video
  shotDetection:
    Description: "shotDetection operator"
    Value: !GetAtt shotDetectionOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", ShotDetection]]
  TechnicalCueDetection:
    Description: "technicalCueDetection operator"
    Value: !GetAtt technicalCueDetectionOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", TechnicalCueDetection]]
  CelebRecognition:
    Description: "CelebRecognition operator"
    Value: !GetAtt celebrityRecognitionOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", CelebRecognition]]
  ContentModeration:
    Description: "Content moderation operator"
    Value: !GetAtt contentModerationOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", ContentModeration]]
  FaceSearch:
    Description: "Face search operator"
    Value: !GetAtt faceSearchOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", FaceSearch]]
  FaceDetection:
    Description: "Face detection operator"
    Value: !GetAtt faceDetectionOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", FaceDetection]]
  LabelDetection:
    Description: "Label detection operator"
    Value: !GetAtt labelDetectionOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", LabelDetection]]
  TextDetection:
    Description: "Text detection operator"
    Value: !GetAtt textDetectionOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", TextDetection]]
  PersonTracking:
    Description: "Person tracking"
    Value: !GetAtt personTrackingOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", PersonTracking]]

  # Rekognition image
  CelebrityRecognitionOperationImage:
    Description: "CelebRecognition image operator"
    Value: !GetAtt celebrityRecognitionOperationImage.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", CelebRecognitionImage]]
  ContentModerationOperationImage:
    Description: "Content moderation image operator"
    Value: !GetAtt contentModerationOperationImage.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", ContentModerationImage]]
  FaceDetectionOperationImage:
    Description: "Face detection image operator"
    Value: !GetAtt faceDetectionOperationImage.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", FaceDetectionImage]]
  FaceSearchOperationImage:
    Description: "Face search image operator"
    Value: !GetAtt faceSearchOperationImage.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", FaceSearchImage]]
  LabelDetectionOperationImage:
    Description: "CelebRecognition image operator"
    Value: !GetAtt labelDetectionOperationImage.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", LabelDetectionImage]]
  TextDetectionOperationImage:
    Description: "Text Detection image operator"
    Value: !GetAtt textDetectionOperationImage.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", TextDetectionImage]]
  WaitOperation:
    Description: "Wait operator - wait until /workflow/execution/continue API is called"
    Value: !GetAtt WaitOperation.Name
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", Wait]]
  StackName:
    Value: !Ref AWS::StackName
