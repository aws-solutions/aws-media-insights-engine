AWSTemplateFormatVersion: 2010-09-09
Description: "aws-media-insights-engine version %%VERSION%%. This AWS CloudFormation template defines resources for the analytics streaming pipeline."

Parameters:
  KinesisShardCount:
    Type: Number
    Default: 1
  DynamoStreamArn:
    Type: String
    Description: "Arn of the Dataplane Dynamo DB Stream"
  DynamoTableArn:
    Type: String
    Description: "Arn of the Dataplane Dynamo DB table"
  botoConfig:
    Type: String
    Description: "Botocore config"
  KmsId:
    Type: String
    Description: "KMS Key ID for encryption"

Mappings:
  SourceCode:
    General:
      RegionalS3Bucket: "%%REGIONAL_BUCKET_NAME%%"
      CodeKeyPrefix: "aws-media-insights-engine/%%VERSION%%"

Resources:
# kinesis data stream

  AnalyticsStream:
    Type: "AWS::Kinesis::Stream"
    Properties:
      ShardCount: !Ref KinesisShardCount
      StreamEncryption:
        EncryptionType: "KMS"
        KeyId: !Ref KmsId
      Tags:
        - Key: "environment"
          Value: "mie"

# ddb stream lambda

  DynamoDBStreamingFunction:
    Type: "AWS::Lambda::Function"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "This Lambda function does not need to access any resource provisioned within a VPC."
          - id: W92
            reason: "This function does not require performance optimization, so the default concurrency limits suffice."
    Properties:
      Handler: "stream.lambda_handler"
      Role: !GetAtt LambdaStreamRole.Arn
      TracingConfig:
          Mode: "PassThrough"
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "RegionalS3Bucket"], Ref: "AWS::Region"]]
        S3Key:
          !Join [
            "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "ddbstream.zip",
            ],
          ]
      Runtime: "python3.9"
      Environment:
        Variables:
          StreamName: !Ref AnalyticsStream
          botoConfig: !Ref botoConfig
      Tags:
        - Key: "environment"
          Value: "mie"

# stream event mapping for lambda

  StreamingFunctionEventMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      Enabled: true
      EventSourceArn: !Ref DynamoStreamArn
      FunctionName: !GetAtt DynamoDBStreamingFunction.Arn
      StartingPosition: "LATEST"

# iam stuff
  LambdaStreamRole:
    Type: "AWS::IAM::Role"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The policy applies to all resources - can't be scoped to a specific resource"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-LambdaStreamAccessPolicy"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "kinesis:ListShards"
                  - "kinesis:DescribeStream"
                  - "kinesis:GetRecords"
                  - "kinesis:GetShardIterator"
                  - "kinesis:ListStreams"
                  - "kinesis:DescribeStreamSummary"
                  - "kinesis:PutRecord"
                  - "kinesis:PutRecords"
                Resource: !GetAtt AnalyticsStream.Arn
              - Effect: Allow
                Action:
                  - "dynamodb:DescribeStream"
                  - "dynamodb:GetRecords"
                  - "dynamodb:GetShardIterator"
                  - "dynamodb:ListStreams"
                Resource: !Ref DynamoStreamArn
              - Effect: Allow
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"
              # TODO: Security - Scope this down
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource:
                  - "Fn::Sub": "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*-DynamoDBStream*"
              - Effect: Allow
                Action:
                  - "kms:GenerateDataKey"
                  - "kms:Decrypt"
                Resource:
                  - "Fn::Sub": "arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/${KmsId}"
      Tags:
        - Key: "environment"
          Value: "mie"

Outputs:
  analyticsStreamArn:
    Value: !GetAtt AnalyticsStream.Arn
