AWSTemplateFormatVersion: "2010-09-09"
Description: Media Insights Engine - Base AWS CloudFormation template that provisions the core Media Insights Engine services and provides parameters for enabling additional functionality.

Parameters:
  DeployTestResources:
    Description: Deploy test resources which contains lambdas required for integration and e2e testing
    Type: String
    Default: No
    AllowedValues:
      - Yes
      - No
  DeployAnalyticsPipeline:
    Type: String
    Description: Deploy a metadata streaming pipeline that can be consumed by downstream analytics plaforms
    Default: Yes
    AllowedValues:
      - Yes
      - No

  MaxConcurrentWorkflows:
    Type: Number
    Description: Maximum number of workflows to run concurrently.  When the maximum is reached, additional workflows are added to a wait queue.
    Default: 5
    MinValue: 1

  EnableXrayTrace:
    Description: Enable Active Xray tracing on all entry points to the stack
    Type: String
    Default: No
    AllowedValues:
      - Yes
      - No

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      #     -
      #       Label:
      #           default: Control Plane Configuration
      #       Parameters:
      #     -
      #       Label:
      #           default: Data Plane Configuration
      #       Parameters:
      - Label:
          default: System Configuration
        Parameters:
          - MaxConcurrentWorkflows

Conditions:
  DeployTestResourcesCondition: !Equals [!Ref DeployTestResources, Yes]
  DeployAnalyticsPipelineCondition: !Equals [!Ref DeployAnalyticsPipeline, Yes]
  EnableTraceOnEntryPoints: !Equals [!Ref EnableXrayTrace, Yes]

Mappings:
  SourceCode:
    General:
      S3Bucket: "%%BUCKET_NAME%%"
      CodeKeyPrefix: "media_insights_engine/%%VERSION%%/code"
      TemplateKeyPrefix: "media_insights_engine/%%VERSION%%/cf"

Resources:
  # Helper function - create a short UUID to avoid name conflicts
  MieHelperFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import string
          import random
          import cfnresponse
          def id_generator(size=6, chars=string.ascii_lowercase + string.digits):
              return "".join(random.choices(chars, k=size))
          def handler(event, context):
              response_data = {'Data': id_generator()}
              cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, "CustomResourcePhysicalID")
      Handler: index.handler
      Runtime: python3.6
      Role: !GetAtt MieHelperExecutionRole.Arn
      Tags:
        - Key: "environment"
          Value: "mie"

  MieHelperFunctionPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt MieHelperFunction.Arn
      Principal: 'cloudformation.amazonaws.com'
  GetShortUUID:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt MieHelperFunction.Arn

  # Custom log group
  MieLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 14

  # IAM Roles
  MieHelperExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: ['logs:*']
                Resource: 'arn:aws:logs:*:*:*'
      Tags:
        - Key: "environment"
          Value: "mie"

  StageExecutionRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The X-Ray policy applies to all resources - can't be scoped to a specific resource"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
        - Key: "environment"
          Value: "mie"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-stage-execution-lambda"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Join [
                    "",
                    [
                      "arn:aws:states:",
                      Ref: "AWS::Region",
                      ":",
                      Ref: "AWS::AccountId",
                      ":stateMachine:",
                      "*",
                    ],
                  ]
                Condition:
                  StringEquals:
                    aws:ResourceTag/environment: "mie"
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:GetRecords"
                  - "dynamodb:DescribeLimits"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:BatchWriteItem"
                Resource:
                  - !Join [
                      "",
                      [
                        "arn:aws:dynamodb:",
                        Ref: "AWS::Region",
                        ":",
                        Ref: "AWS::AccountId",
                        ":table/",
                        Ref: "WorkflowTable",
                      ],
                    ]
                  - !Join [
                    "",
                    [
                      "arn:aws:dynamodb:",
                      Ref: "AWS::Region",
                      ":",
                      Ref: "AWS::AccountId",
                      ":table/",
                      Ref: "WorkflowExecutionTable",
                    ],
                  ]
                  - !Join [
                      "",
                      [
                        "arn:aws:dynamodb:",
                        Ref: "AWS::Region",
                        ":",
                        Ref: "AWS::AccountId",
                        ":table/",
                        Ref: "WorkflowExecutionTable",
                        "/index/",
                        "*",
                      ],
                    ]
                  - !Join [
                    "",
                    [
                      "arn:aws:dynamodb:",
                      Ref: "AWS::Region",
                      ":",
                      Ref: "AWS::AccountId",
                      ":table/",
                      Ref: "SystemTable",
                    ],
                  ]
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join [
                    "",
                    [
                      "arn:aws:logs:",
                      Ref: "AWS::Region",
                      ":",
                      Ref: "AWS::AccountId",
                      ":log-group:/aws/lambda/*",
                    ],
                  ]
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:ListQueues
                  - sqs:ChangeMessageVisibility
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                Resource:
                  - "Fn::GetAtt":
                      - StageExecutionQueue
                      - Arn
                  - "Fn::GetAtt":
                      - WorkflowExecutionLambdaDeadLetterQueue
                      - Arn
              - Effect: Allow
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"

  OperationLambdaExecutionRole:
    Type: AWS::IAM::Role
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The X-Ray policy applies to all resources - can't be scoped to a specific resource"
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Tags:
        - Key: "environment"
          Value: "mie"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-operation-lambda"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "states:DescribeExecution"
                  - "states:GetExecutionHistory"
                  - "states:StopExecution"
                Resource:
                  - !Sub "arn:aws:states:${AWS::Region}:${AWS::AccountId}:execution:*:*"
              - Effect: Allow
                Action:
                  - states:StartExecution
                Resource:
                  - !Join [
                    "",
                    [
                      "arn:aws:states:",
                      Ref: "AWS::Region",
                      ":",
                      Ref: "AWS::AccountId",
                      ":stateMachine:",
                      "*",
                    ],
                  ]
                Condition:
                  StringEquals:
                    aws:ResourceTag/environment: "mie"
              - Effect: Allow
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                  - "dynamodb:DescribeTable"
                  - "dynamodb:BatchGetItem"
                  - "dynamodb:GetRecords"
                  - "dynamodb:DescribeLimits"
                  - "dynamodb:PutItem"
                  - "dynamodb:UpdateItem"
                  - "dynamodb:DeleteItem"
                  - "dynamodb:BatchWriteItem"
                Resource:
                  - !Join [
                      "",
                      [
                        "arn:aws:dynamodb:",
                        Ref: "AWS::Region",
                        ":",
                        Ref: "AWS::AccountId",
                        ":table/",
                        Ref: "WorkflowTable",
                      ],
                    ]
                  - !Join [
                    "",
                    [
                      "arn:aws:dynamodb:",
                      Ref: "AWS::Region",
                      ":",
                      Ref: "AWS::AccountId",
                      ":table/",
                      Ref: "WorkflowExecutionTable",
                    ],
                  ]
                  - !Join [
                      "",
                      [
                        "arn:aws:dynamodb:",
                        Ref: "AWS::Region",
                        ":",
                        Ref: "AWS::AccountId",
                        ":table/",
                        Ref: "WorkflowExecutionTable",
                        "/index/",
                        "*",
                      ],
                    ]
                  - !Join [
                    "",
                    [
                      "arn:aws:dynamodb:",
                      Ref: "AWS::Region",
                      ":",
                      Ref: "AWS::AccountId",
                      ":table/",
                      Ref: "SystemTable",
                    ],
                  ]
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join [
                    "",
                    [
                      "arn:aws:logs:",
                      Ref: "AWS::Region",
                      ":",
                      Ref: "AWS::AccountId",
                      ":log-group:/aws/lambda/*",
                    ],
                  ]
              - Effect: Allow
                Action:
                  - sqs:DeleteMessage
                  - sqs:ListQueues
                  - sqs:ChangeMessageVisibility
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                Resource:
                  - "Fn::GetAtt":
                      - StageExecutionQueue
                      - Arn
                  - "Fn::GetAtt":
                      - WorkflowExecutionLambdaDeadLetterQueue
                      - Arn
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource:
                  - "Fn::GetAtt":
                      - WorkflowSchedulerLambda
                      - Arn
              - Effect: Allow
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"

  StepFunctionRole:
    Type: "AWS::IAM::Role"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The X-Ray policy applies to all resources - can't be scoped to a specific resource"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "states.amazonaws.com"
      Tags:
        - Key: "environment"
          Value: "mie"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-sfn-lambda-exec"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action: "lambda:InvokeFunction"
                Resource:
                  - "arn:aws:lambda:*:*:function:*OperatorLibrary*"
                  - "arn:aws:lambda:*:*:function:*start-wait-operation"
                  - "arn:aws:lambda:*:*:function:*check-wait-operation"
                Effect: "Allow"
              - Effect: "Allow"
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                  - "xray:GetSamplingRules"
                  - "xray:GetSamplingTargets"
                Resource: "*"

  operatorFailedRole:
    Type: "AWS::IAM::Role"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The X-Ray policy applies to all resources - can't be scoped to a specific resource"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action: "sts:AssumeRole"
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
      Tags:
        - Key: "environment"
          Value: "mie"
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-operator-failed"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*:*"
                Effect: Allow
              - Effect: Allow
                Action:
                  - "xray:PutTraceSegments"
                  - "xray:PutTelemetryRecords"
                Resource: "*"


  WorkflowExecutionStreamLambdaRole:
    Type: "AWS::IAM::Role"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "Lambda requires ability to write to cloudwatch *, as configured in the default AWS lambda execution role."
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-WorkflowExecutionLambdaStreamAccessPolicy"
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - "dynamodb:DescribeStream"
                  - "dynamodb:GetRecords"
                  - "dynamodb:GetShardIterator"
                  - "dynamodb:ListStreams"
                Resource:
                  Fn::GetAtt:
                    - WorkflowExecutionTable
                    - StreamArn
              - Effect: Allow
                Action:
                  - "sns:Publish"
                Resource:
                  !Ref WorkflowExecutionEventTopic
              # TODO: Security - Scope this down
              - Effect: Allow
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
  # Services - Dynamodb

  SystemTable:
    Type: AWS::DynamoDB::Table
    Properties:
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Name
          AttributeType: S
      KeySchema:
        - AttributeName: Name
          KeyType: HASH
      TableName: !Join ["", [Ref: "AWS::StackName", "System"]]
      Tags:
        - Key: "environment"
          Value: "mie"

  WorkflowTable:
    Type: AWS::DynamoDB::Table
    Properties:
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Name
          AttributeType: S
      KeySchema:
        - AttributeName: Name
          KeyType: HASH
      TableName: !Join ["", [Ref: "AWS::StackName", "Workflow"]]
      Tags:
        - Key: "environment"
          Value: "mie"

  StageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Name
          AttributeType: S
      KeySchema:
        - AttributeName: Name
          KeyType: HASH
      TableName: !Join ["", [Ref: "AWS::StackName", "Stage"]]
      Tags:
        - Key: "environment"
          Value: "mie"

  OperationTable:
    Type: AWS::DynamoDB::Table
    Properties:
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Name
          AttributeType: S
      KeySchema:
        - AttributeName: Name
          KeyType: HASH
      TableName: !Join ["", [Ref: "AWS::StackName", "Operation"]]
      Tags:
        - Key: "environment"
          Value: "mie"

  HistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: Version
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
        - AttributeName: Version
          KeyType: RANGE
      TableName: !Join ["", [Ref: "AWS::StackName", "History"]]
      Tags:
        - Key: "environment"
          Value: "mie"

  WorkflowExecutionTable:
    Type: AWS::DynamoDB::Table
    Properties:
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: Id
          AttributeType: S
        - AttributeName: Status
          AttributeType: S
        - AttributeName: AssetId
          AttributeType: S
      KeySchema:
        - AttributeName: Id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: WorkflowExecutionStatus
          KeySchema:
            - AttributeName: Status
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: WorkflowExecutionAssetId
          KeySchema:
            - AttributeName: AssetId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      TableName: !Join ["", [Ref: "AWS::StackName", "WorkflowExecution"]]
      StreamSpecification:
        StreamViewType: "NEW_AND_OLD_IMAGES"
      Tags:
        - Key: "environment"
          Value: "mie"

  DataplaneTable:
    Type: AWS::DynamoDB::Table
    Properties:
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: AssetId
          AttributeType: S
      KeySchema:
        - AttributeName: AssetId
          KeyType: HASH
      TableName: !Join ["", [Ref: "AWS::StackName", "DataplaneTable"]]
      StreamSpecification:
        StreamViewType: "NEW_AND_OLD_IMAGES"
      Tags:
        - Key: "environment"
          Value: "mie"

  # Services - S3
  DataplaneLogsBucket:
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: "environment"
          Value: "mie"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: "Used to store access logs for other buckets"
          - id: W51
            reason: "Bucket is private and does not need a bucket policy"

  # TODO: Update cors config per: https://docs.amplify.aws/lib/storage/getting-started/q/platform/js#using-amazon-s3
  Dataplane:
    Type: "AWS::S3::Bucket"
    DependsOn: DataplaneLogsBucket
    DeletionPolicy: Retain
    Properties:
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ["*"]
            AllowedMethods: ["HEAD", "GET", "POST", "DELETE", "PUT"]
            AllowedOrigins: ["*"]
            MaxAge: 3000
            ExposedHeaders:
              - x-amz-server-side-encryption
              - x-amz-request-id
              - x-amz-id-2
              - ETag
            Id: AllowUploadsFromWebApp
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref DataplaneLogsBucket
        LogFilePrefix: "access_logs/"
      LifecycleConfiguration:
        Rules:
          - Id: "Keep access log for 10 days"
            Status: Enabled
            Prefix: "access_logs/"
            ExpirationInDays: 10
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
          - Id: "Keep cloudfront log for 10 days"
            Status: Enabled
            Prefix: "cf_logs/"
            ExpirationInDays: 10
            AbortIncompleteMultipartUpload:
              DaysAfterInitiation: 1
      Tags:
        - Key: "environment"
          Value: "mie"

  DataplaneBucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket:
        Ref: "Dataplane"
      PolicyDocument:
        Statement:
          - Effect: Deny
            Principal: "*"
            Action: "*"
            Resource: !Sub "arn:aws:s3:::${Dataplane}/*"
            Condition:
              Bool:
                aws:SecureTransport: false


  # Service -SNS

  WorkflowExecutionEventTopic:
    Type: 'AWS::SNS::Topic'
    Properties: {}
  WorkflowExecutionEventTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The topic permissions are scoped to the account using the condition"
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Ref 'AWS::AccountId'
          Action:
          - SNS:Subscribe
          - SNS:Receive
          Resource: !Ref WorkflowExecutionEventTopic
          Condition:
            StringEquals:
              AWS:SourceOwner: !Ref 'AWS::AccountId'
      Topics:
        - !Ref WorkflowExecutionEventTopic

  WorkflowExecutionEventQueue:
    Type: AWS::SQS::Queue
  SqsQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "The queue permissions are scoped to the SNS topic using the condition"
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            AWS: !Ref 'AWS::AccountId'
          Action:
          - sqs:SendMessage
          Resource: !GetAtt WorkflowExecutionEventQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref WorkflowExecutionEventTopic
      Queues:
        - !Ref WorkflowExecutionEventQueue

  WorkflowExecutionEventSnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: sqs
      Endpoint: !GetAtt WorkflowExecutionEventQueue.Arn
      TopicArn: !Ref WorkflowExecutionEventTopic


  # Services - SQS

  WorkflowExecutionLambdaDeadLetterQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !Sub "${AWS::StackName}-WorkflowExecLambdaDLQ"
      MessageRetentionPeriod: 43200 # #Maximum, 12 hours in seconds.
      Tags:
        - Key: "environment"
          Value: "mie"

  StageExecutionDeadLetterQueue:
    Type: "AWS::SQS::Queue"
    Properties:
      QueueName: !Sub "${AWS::StackName}-StageExecDLQ"
      MessageRetentionPeriod: 43200 # #Maximum, 12 hours in seconds.
      Tags:
        - Key: "environment"
          Value: "mie"

  StageExecutionQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-StageExec"
      VisibilityTimeout: 43200 #Maximum, 12 hours in seconds.  Stages are long running
      ReceiveMessageWaitTimeSeconds: 20 #Maximum, long poll on this queue, it has one reader that is single threaded
      RedrivePolicy:
        deadLetterTargetArn:
          "Fn::GetAtt":
            - StageExecutionDeadLetterQueue
            - Arn
        maxReceiveCount: 1 # Don't retry if stage times out
      Tags:
        - Key: "environment"
          Value: "mie"

  # Lambda Layers:

  MediaInsightsEnginePython37Layer:
    Type: "AWS::Lambda::LayerVersion"
    DeletionPolicy: Retain
    Properties:
      CompatibleRuntimes:
        - python3.7
      Content:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "media_insights_engine_lambda_layer_python3.7.zip",
            ],
          ]
      Description: Boto3 and MediaInsightsEngineLambdaHelper packages for Python 3.7
      LayerName: media-insights-engine-python37
      LicenseInfo: Apache-2.0

  MediaInsightsEnginePython36Layer:
    Type: "AWS::Lambda::LayerVersion"
    DeletionPolicy: Retain
    Properties:
      CompatibleRuntimes:
        - python3.6
      Content:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "media_insights_engine_lambda_layer_python3.6.zip",
            ],
          ]
      Description: Boto3 and MediaInsightsEngineLambdaHelper packages for Python 3.6
      LayerName: media-insights-engine-python36
      LicenseInfo: Apache-2.0

  Boto3Python37LayerPermission:
    Type: "AWS::Lambda::LayerVersionPermission"
    DeletionPolicy: Retain
    Properties:
      Action: lambda:GetLayerVersion
      LayerVersionArn: !Ref MediaInsightsEnginePython37Layer
      Principal: !Ref AWS::AccountId

  # Services - Lambda

  LambdaSchedule:
    Type: "AWS::Events::Rule"
    DependsOn: WorkflowSchedulerLambda
    Properties:
      Description: >
        A schedule for the Lambda function..
      ScheduleExpression: rate(1 minute)
      State: ENABLED
      Targets:
        - Arn: !Sub ${WorkflowSchedulerLambda.Arn}
          Id: LambdaSchedule

  LambdaSchedulePermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Sub ${WorkflowSchedulerLambda.Arn}
      Principal: "events.amazonaws.com"
      SourceArn: !Sub ${LambdaSchedule.Arn}

  WorkflowSchedulerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          STAGE_EXECUTION_QUEUE_URL: !Ref StageExecutionQueue
          STAGE_TABLE_NAME: !Ref StageTable
          OPERATION_TABLE_NAME: !Ref OperationTable
          WORKFLOW_EXECUTION_TABLE_NAME: !Ref WorkflowExecutionTable
          WORKFLOW_TABLE_NAME: !Ref WorkflowTable
          SYSTEM_TABLE_NAME: !Ref SystemTable
          DEFAULT_MAX_CONCURRENT_WORKFLOWS: !Ref MaxConcurrentWorkflows
      Handler: app.workflow_scheduler_lambda
      TracingConfig:
          Mode: !If [EnableTraceOnEntryPoints, "Active", "PassThrough"]
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "workflow.zip",
            ],
          ]
      Layers:
        - !Ref "MediaInsightsEnginePython37Layer"
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - StageExecutionRole
          - Arn
      Runtime: python3.7
      Timeout: 900
      ReservedConcurrentExecutions: 1
      DeadLetterConfig:
        TargetArn:
          Fn::GetAtt:
            - WorkflowExecutionLambdaDeadLetterQueue
            - Arn
      Tags:
        - Key: "environment"
          Value: "mie"

  # Workflow state machine error handler
  WorkflowErrorHandlerLambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          STAGE_EXECUTION_QUEUE_URL: !Ref StageExecutionQueue
          STAGE_TABLE_NAME: !Ref StageTable
          OPERATION_TABLE_NAME: !Ref OperationTable
          WORKFLOW_EXECUTION_TABLE_NAME: !Ref WorkflowExecutionTable
          WORKFLOW_TABLE_NAME: !Ref WorkflowTable
          SYSTEM_TABLE_NAME: !Ref SystemTable
          DEFAULT_MAX_CONCURRENT_WORKFLOWS: !Ref MaxConcurrentWorkflows
          ShortUUID: !GetAtt GetShortUUID.Data
          WORKFLOW_SCHEDULER_LAMBDA_ARN:
            Fn::GetAtt:
              - WorkflowSchedulerLambda
              - Arn
      Handler: app.workflow_error_handler_lambda
      TracingConfig:
          Mode: !If [EnableTraceOnEntryPoints, "Active", "PassThrough"]
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "workflow.zip",
            ],
          ]
      Layers:
        - !Ref "MediaInsightsEnginePython37Layer"
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - OperationLambdaExecutionRole
          - Arn
      Runtime: python3.7
      Timeout: 900
      ReservedConcurrentExecutions: 1
      DeadLetterConfig:
        TargetArn:
          Fn::GetAtt:
            - WorkflowExecutionLambdaDeadLetterQueue
            - Arn
      Tags:
        - Key: "environment"
          Value: "mie"

  StateMachineErrorCloudWatchEvent:
    Type: AWS::Events::Rule
    Properties:
        Name: !Sub "${AWS::StackName}-state-machine-error-handler"
        Description: "state machine error handler"
        EventPattern:
            source:
                - "aws.states"
            detail-type:
                - "Step Functions Execution Status Change"
            detail:
                status:
                    - FAILED
                    - ABORTED
                    - TIMED_OUT
        State: ENABLED
        Targets:
            -
                Id: !Ref WorkflowErrorHandlerLambda
                Arn: !GetAtt WorkflowErrorHandlerLambda.Arn

  PermissionToInvokeLambda:
      Type: AWS::Lambda::Permission
      Properties:
          FunctionName: !Ref WorkflowErrorHandlerLambda
          Action: lambda:InvokeFunction
          Principal: events.amazonaws.com
          SourceArn: !GetAtt StateMachineErrorCloudWatchEvent.Arn

  CompleteStageLambda:
    Type: AWS::Lambda::Function
    DependsOn:
      - WorkflowSchedulerLambda
    Properties:
      Environment:
        Variables:
          STAGE_EXECUTION_QUEUE_URL: !Ref StageExecutionQueue
          STAGE_TABLE_NAME: !Ref StageTable
          OPERATION_TABLE_NAME: !Ref OperationTable
          WORKFLOW_EXECUTION_TABLE_NAME: !Ref WorkflowExecutionTable
          WORKFLOW_TABLE_NAME: !Ref WorkflowTable
          SYSTEM_TABLE_NAME: !Ref SystemTable
          WORKFLOW_SCHEDULER_LAMBDA_ARN:
            Fn::GetAtt:
              - WorkflowSchedulerLambda
              - Arn
      Handler: app.complete_stage_execution_lambda
      TracingConfig:
          Mode: "PassThrough"
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "workflow.zip",
            ],
          ]
      Layers:
        - !Ref "MediaInsightsEnginePython37Layer"
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - OperationLambdaExecutionRole
          - Arn
      Runtime: python3.7
      Timeout: 900
      Tags:
        - Key: "environment"
          Value: "mie"

  FilterOperationLambda:
    Type: AWS::Lambda::Function
    Properties:
      Environment:
        Variables:
          STAGE_EXECUTION_QUEUE_URL: !Ref StageExecutionQueue
          STAGE_TABLE_NAME: !Ref StageTable
          OPERATION_TABLE_NAME: !Ref OperationTable
          WORKFLOW_EXECUTION_TABLE_NAME: !Ref WorkflowExecutionTable
          WORKFLOW_TABLE_NAME: !Ref WorkflowTable
      Handler: app.filter_operation_lambda
      TracingConfig:
          Mode: "PassThrough"
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "workflow.zip",
            ],
          ]
      Layers:
        - !Ref "MediaInsightsEnginePython37Layer"
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - OperationLambdaExecutionRole
          - Arn
      Runtime: python3.7
      Timeout: 900
      Tags:
        - Key: "environment"
          Value: "mie"

  OperatorFailedLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: "operator_failed.lambda_handler"
      Layers:
        - !Ref "MediaInsightsEnginePython37Layer"
      Role: !GetAtt "operatorFailedRole.Arn"
      TracingConfig:
          Mode: "PassThrough"
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "operator_failed.zip",
            ],
          ]
      Runtime: "python3.7"
      Tags:
        - Key: "environment"
          Value: "mie"

  StartWaitOperationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-start-wait-operation"
      Environment:
        Variables:
          STAGE_EXECUTION_QUEUE_URL: !Ref StageExecutionQueue
          STAGE_TABLE_NAME: !Ref StageTable
          OPERATION_TABLE_NAME: !Ref OperationTable
          WORKFLOW_EXECUTION_TABLE_NAME: !Ref WorkflowExecutionTable
          WORKFLOW_TABLE_NAME: !Ref WorkflowTable
      Handler: app.start_wait_operation_lambda
      Layers:
        - !Ref "MediaInsightsEnginePython37Layer"
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "workflow.zip",
            ],
          ]
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - OperationLambdaExecutionRole
          - Arn
      Runtime: python3.7
      Timeout: 900
      Tags:
        - Key: "environment"
          Value: "mie"

  CheckWaitOperationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-check-wait-operation"
      Environment:
        Variables:
          STAGE_EXECUTION_QUEUE_URL: !Ref StageExecutionQueue
          STAGE_TABLE_NAME: !Ref StageTable
          OPERATION_TABLE_NAME: !Ref OperationTable
          WORKFLOW_EXECUTION_TABLE_NAME: !Ref WorkflowExecutionTable
          WORKFLOW_TABLE_NAME: !Ref WorkflowTable
      Handler: app.check_wait_operation_lambda
      Layers:
        - !Ref "MediaInsightsEnginePython37Layer"
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "workflow.zip",
            ],
          ]
      MemorySize: 256
      Role:
        Fn::GetAtt:
          - OperationLambdaExecutionRole
          - Arn
      Runtime: python3.7
      Timeout: 900
      Tags:
        - Key: "environment"
          Value: "mie"

  WorkflowExecutionStreamingFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Handler: "workflowstream.lambda_handler"
      Role: !GetAtt WorkflowExecutionStreamLambdaRole.Arn
      Environment:
        Variables:
          TOPIC_ARN: !Ref WorkflowExecutionEventTopic
      Code:
        S3Bucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        S3Key:
          !Join [
            "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "workflowstream.zip",
            ],
          ]
      Runtime: "python3.7"
      Tags:
        - Key: "environment"
          Value: "mie"

# stream event mapping for lambda

  StreamingFunctionEventMapping:
    Type: "AWS::Lambda::EventSourceMapping"
    Properties:
      Enabled: true
      EventSourceArn:
        Fn::GetAtt:
          - WorkflowExecutionTable
          - StreamArn
      FunctionName: !GetAtt WorkflowExecutionStreamingFunction.Arn
      StartingPosition: "LATEST"

  # DataPlane API Stack
  MediaInsightsDataplaneApiStack:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        !Join [
          "",
          [
            "https://",
            !FindInMap ["SourceCode", "General", "S3Bucket"],
            ".s3.",
            Ref: "AWS::Region",
            ".amazonaws.com/",
            !FindInMap ["SourceCode", "General", "TemplateKeyPrefix"],
            "/media-insights-dataplane-api-stack.template",
          ],
        ]
      Parameters:
        DataplaneTableName: !Ref DataplaneTable
        DataplaneBucketName: !Ref Dataplane
        DeploymentPackageBucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        TracingConfigMode: !If [EnableTraceOnEntryPoints, "Active", "PassThrough"]
        DeploymentPackageKey:
          !Join [
            "/",
            [
              !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
              "dataplaneapi.zip",
            ],
          ]
        MediaInsightsEnginePython37Layer: !Ref MediaInsightsEnginePython37Layer

  Analytics:
    Type: "AWS::CloudFormation::Stack"
    Condition: DeployAnalyticsPipelineCondition
    DependsOn:
      - MediaInsightsWorkflowApi
      - MediaInsightsDataplaneApiStack
    Properties:
      TemplateURL:
        !Join [
          "",
          [
            "https://",
            !FindInMap ["SourceCode", "General", "S3Bucket"],
            ".s3.",
            Ref: "AWS::Region",
            ".amazonaws.com/",
            !FindInMap ["SourceCode", "General", "TemplateKeyPrefix"],
            "/media-insights-dataplane-streaming-stack.template",
          ],
        ]
      Parameters:
        DynamoStreamArn:
          Fn::GetAtt:
            - DataplaneTable
            - StreamArn
        DynamoTableArn: !GetAtt DataplaneTable.Arn

  # Workflow creation and execution API
  MediaInsightsWorkflowApi:
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        !Join [
          "",
          [
            "https://",
            !FindInMap ["SourceCode", "General", "S3Bucket"],
            ".s3.",
            Ref: "AWS::Region",
            ".amazonaws.com/",
            !FindInMap ["SourceCode", "General", "TemplateKeyPrefix"],
            "/media-insights-workflowapi-stack.template",
          ],
        ]
      Parameters:
        ShortUUID: !GetAtt GetShortUUID.Data
        StageExecutionQueueUrl: !Ref StageExecutionQueue
        StageExecutionRole: !GetAtt StepFunctionRole.Arn
        OperationTableName: !Ref OperationTable
        StageTableName: !Ref StageTable
        WorkflowExecutionTableName: !Ref WorkflowExecutionTable
        WorkflowTableName: !Ref WorkflowTable
        HistoryTableName: !Ref HistoryTable
        SystemTableName: !Ref SystemTable
        SqsQueueArn: !GetAtt StageExecutionQueue.Arn
        MediaInsightsEnginePython37Layer: !Ref MediaInsightsEnginePython37Layer
        TracingConfigMode: !If [EnableTraceOnEntryPoints, "Active", "PassThrough"]
        CompleteStageLambdaArn:
          Fn::GetAtt:
            - CompleteStageLambda
            - Arn
        FilterOperationLambdaArn:
          Fn::GetAtt:
            - FilterOperationLambda
            - Arn
        WorkflowSchedulerLambdaArn:
          Fn::GetAtt:
            - WorkflowSchedulerLambda
            - Arn
        DataplaneEndpoint:
          Fn::GetAtt:
            - MediaInsightsDataplaneApiStack
            - Outputs.APIHandlerName
        DataplaneHandlerArn:
          Fn::GetAtt:
            - MediaInsightsDataplaneApiStack
            - Outputs.APIHandlerArn
        DataPlaneBucket: !Ref Dataplane
        OperatorFailedHandlerLambdaArn: !GetAtt OperatorFailedLambda.Arn
        DeploymentPackageBucket: !FindInMap ["SourceCode", "General", "S3Bucket"]
        DeploymentPackageKey:
          !Join [
            "/",
            [
            !FindInMap ["SourceCode", "General", "CodeKeyPrefix"],
            "workflowapi.zip",
            ],
          ]

  OperatorLibrary:
    DependsOn:
      - MediaInsightsWorkflowApi
      - MediaInsightsDataplaneApiStack
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        !Join [
          "",
          [
            "https://",
            !FindInMap ["SourceCode", "General", "S3Bucket"],
            ".s3.",
            Ref: "AWS::Region",
            ".amazonaws.com/",
            !FindInMap ["SourceCode", "General", "TemplateKeyPrefix"],
            "/media-insights-operator-library.template",
          ],
        ]
      Parameters:
        WorkflowCustomResourceArn:
          Fn::GetAtt:
            - MediaInsightsWorkflowApi
            - Outputs.WorkflowCustomResourceArn
        DataPlaneEndpoint: !GetAtt MediaInsightsDataplaneApiStack.Outputs.APIHandlerName
        DataPlaneHandlerArn: !GetAtt MediaInsightsDataplaneApiStack.Outputs.APIHandlerArn
        DataPlaneBucket: !Ref Dataplane
        MediaInsightsEnginePython37Layer: !Ref MediaInsightsEnginePython37Layer
        MediaInsightsEnginePython36Layer: !Ref MediaInsightsEnginePython36Layer
        StartWaitOperationLambda: !GetAtt StartWaitOperationLambda.Arn
        CheckWaitOperationLambda: !GetAtt CheckWaitOperationLambda.Arn

  TestResources:
    Condition: DeployTestResourcesCondition
    DependsOn:
      - MediaInsightsWorkflowApi
      - MediaInsightsDataplaneApiStack
      - OperatorLibrary
    Type: "AWS::CloudFormation::Stack"
    Properties:
      TemplateURL:
        !Join [
          "",
          [
            "https://",
            !FindInMap ["SourceCode", "General", "S3Bucket"],
            ".s3.",
            Ref: "AWS::Region",
            ".amazonaws.com/",
            !FindInMap ["SourceCode", "General", "TemplateKeyPrefix"],
            "/media-insights-test-operations-stack.template",
          ],
        ]
      Parameters:
        WorkflowCustomResourceArn:
          Fn::GetAtt:
            - MediaInsightsWorkflowApi
            - Outputs.WorkflowCustomResourceArn
        DataplaneEndpoint:
          Fn::GetAtt:
            - MediaInsightsDataplaneApiStack
            - Outputs.APIHandlerName
        DataPlaneBucket: !Ref Dataplane
        MediaInsightsEnginePython37Layer: !Ref MediaInsightsEnginePython37Layer

Outputs:
  # TODO: Add outputs for rest api IDs of workflow/dataplane apis
  OperatorLibraryStack:
    Description: Nested cloudformation stack that contains the MIE operator library
    Value: !GetAtt OperatorLibrary.Outputs.StackName
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", OperatorLibraryStack]]
  DataplaneBucket:
    Description: Bucket used to store transfomred media object from workflow execution
    Value: !Ref Dataplane
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", DataplaneBucket]]
  DataplaneApiEndpoint:
    Description: Endpoint for data persisitence API
    Value: !GetAtt MediaInsightsDataplaneApiStack.Outputs.EndpointURL
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", DataplaneApiEndpoint]]
  DataplaneApiRestID:
    Description: REST API ID for dataplane API
    Value: !GetAtt MediaInsightsDataplaneApiStack.Outputs.RestAPIId
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", DataplaneApiId]]
  WorkflowCustomResourceArn:
    Description: Custom resource for creating operations, stages and workflows using CloudFormation
    Value: !GetAtt MediaInsightsWorkflowApi.Outputs.WorkflowCustomResourceArn
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", WorkflowCustomResourceArn]]
  WorkflowApiEndpoint:
    Description: Endpoint for workflow Creation, Execution and Monitoring API
    Value: !GetAtt MediaInsightsWorkflowApi.Outputs.EndpointURL
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", WorkflowApiEndpoint]]
  WorkflowApiRestID:
    Description: REST API ID for workflow API
    Value: !GetAtt MediaInsightsWorkflowApi.Outputs.RestAPIId
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", WorkflowApiId]]
  MediaInsightsEnginePython37Layer:
    Description: Lambda layer for Python libraries
    Value: !Ref MediaInsightsEnginePython37Layer
    Export:
      Name:
        !Join [":", [!Ref "AWS::StackName", MediaInsightsEnginePython37Layer]]
  AnalyticsStreamArn:
    Description: Arn of the dataplane pipeline
    Value: !GetAtt Analytics.Outputs.analyticsStreamArn
    Export:
      Name: !Join [":", [!Ref "AWS::StackName", AnalyticsStreamArn]]
  TestStack:
    Condition: DeployTestResourcesCondition
    Value: !Ref TestResources

